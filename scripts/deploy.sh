#!/bin/bash
# Production Deployment Script for T-Beauty
# This script sets up the application in production environment

set -e  # Exit on any error

echo "🚀 T-Beauty Production Deployment"
echo "=================================="

# Check if we're in the right directory
if [ ! -f "main.py" ]; then
    echo "❌ Error: main.py not found. Please run this script from the project root."
    exit 1
fi

# Check if virtual environment exists
if [ ! -d "venv" ]; then
    echo "📦 Creating virtual environment..."
    python3 -m venv venv
fi

# Activate virtual environment
echo "🔧 Activating virtual environment..."
source venv/bin/activate

# Install/update dependencies
echo "📦 Installing dependencies..."
pip install --upgrade pip
pip install -r requirements.txt

# Check for .env file
if [ ! -f ".env" ]; then
    echo "⚠️  Warning: .env file not found!"
    echo "   Creating .env from template..."
    
    if [ -f "config/.env.example" ]; then
        cp config/.env.example .env
        echo "📋 Created .env file from template"
        echo "⚠️  IMPORTANT: Please edit .env file with your production settings!"
        echo "   Required variables:"
        echo "   - SECRET_KEY (generate a secure key)"
        echo "   - DATABASE_URL (your production database)"
        echo ""
        read -p "Press Enter after you've updated the .env file..."
    else
        echo "❌ Error: config/.env.example not found!"
        exit 1
    fi
fi

# Load environment variables
echo "📋 Loading environment variables..."
export $(cat .env | grep -v '^#' | xargs)

# Validate required environment variables
if [ -z "$SECRET_KEY" ]; then
    echo "❌ Error: SECRET_KEY not set in .env file"
    exit 1
fi

if [ -z "$DATABASE_URL" ]; then
    echo "❌ Error: DATABASE_URL not set in .env file"
    exit 1
fi

# Test database connection
echo "🔍 Testing database connection..."
python -c "
import sys
sys.path.insert(0, 'src')
from app.db.session import engine
try:
    with engine.connect() as conn:
        conn.execute('SELECT 1')
    print('✅ Database connection successful')
except Exception as e:
    print(f'❌ Database connection failed: {e}')
    sys.exit(1)
"

# Create/update database schema
echo "🏗️  Setting up database schema..."
python -c "
import sys
sys.path.insert(0, 'src')
from app.db.session import engine
from app.db.base import Base
import app.models
Base.metadata.create_all(bind=engine)
print('✅ Database schema ready')
"

# Create run script for production
echo "📝 Creating production run script..."
cat > run_production.sh << 'EOF'
#!/bin/bash
# Production startup script - auto-generated by deploy.sh

# Activate virtual environment
source venv/bin/activate

# Load environment variables from .env
if [ -f ".env" ]; then
    export $(cat .env | grep -v '^#' | xargs)
else
    echo "❌ Error: .env file not found!"
    exit 1
fi

# Set production environment
export ENVIRONMENT=production

echo "🚀 Starting T-Beauty in Production Mode"
echo "📊 Database: $(echo $DATABASE_URL | sed 's/postgresql:\/\/[^@]*@/postgresql:\/\/***:***@/')"
echo "🌐 API Documentation: http://localhost:8000/docs"
echo ""

# Start the application
python main.py
EOF

chmod +x run_production.sh

echo ""
echo "🎉 Deployment completed successfully!"
echo ""
echo "📋 Next steps:"
echo "   1. Review your .env file settings"
echo "   2. Start the application: ./run_production.sh"
echo "   3. Access API docs: http://localhost:8000/docs"
echo ""
echo "💡 The run_production.sh script has been created and is ready to use."
echo "   This script is safe to commit to version control as it contains no secrets."